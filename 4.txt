#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include <stdlib.h>

#define MAX 100

// Function to evaluate the suffix expression
int evaluateSuffix(char* exp) {
    int stack[MAX];
    int top = -1;
    char symbol;
    int operand1, operand2, result;
    
    for(int i = 0; exp[i] != '\0'; i++) {
        symbol = exp[i];
        
        if(isdigit(symbol)) {
            stack[++top] = symbol - '0';  // Convert char to integer and push onto stack
        } else {
            // Pop two operands for the operation
            operand2 = stack[top--];
            operand1 = stack[top--];
            
            switch(symbol) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
                case '%':
                    result = operand1 % operand2;
                    break;
                case '^':
                    result = (int)pow(operand1, operand2);  // Power operation
                    break;
                default:
                    printf("Invalid operator\n");
                    exit(1);
            }
            
            // Push the result of the operation back onto the stack
            stack[++top] = result;
        }
    }
    
    // The final result will be the only value left in the stack
    return stack[top];
}

int main() {
    char expression[MAX];
    
    printf("Enter a suffix expression (single digit operands): ");
    scanf("%s", expression);
    
    int result = evaluateSuffix(expression);
    
    printf("Result of the expression: %d\n", result);
    
    return 0;
}
