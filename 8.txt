#include <stdio.h>
#include <stdlib.h>

int a[20][20], q[20], visited[20], reach[20], n, i, j, f = 0, r = -1, count = 0;

void bfs(int v) {
    int current;
    visited[v] = 1; // Mark the starting vertex as visited
    q[++r] = v; // Enqueue the starting vertex

    while (f <= r) {
        current = q[f++]; // Dequeue the front element
        for (i = 1; i <= n; i++) {
            if (a[current][i] && !visited[i]) {
                visited[i] = 1; // Mark as visited
                q[++r] = i; // Enqueue the vertex
            }
        }
    }
}

void dfs(int v) {
    int i;
    reach[v] = 1; // Mark the current vertex as visited
    for (i = 1; i <= n; i++) {
        if (a[v][i] && !reach[i]) { // If connected and not visited
            printf("\n %d->%d", v, i);
            count++;
            dfs(i); // Recursively call DFS
        }
    }
}

int main() {
    int v, choice;
    printf("\n Enter the number of vertices: ");
    scanf("%d", &n);

    // Initialize arrays
    for (i = 1; i <= n; i++) {
        q[i] = 0;
        visited[i] = 0;
        reach[i] = 0;
    }

    printf("\n Enter graph data in matrix form:\n");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            scanf("%d", &a[i][j]);

    while (1) {
        printf("\n1. BFS\n2. DFS\n3. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("\n Enter the starting vertex: ");
                scanf("%d", &v);

                if (v < 1 || v > n) {
                    printf("\n Invalid vertex! Please enter a valid vertex.\n");
                } else {
                    // Reset visited array for BFS
                    for (i = 1; i <= n; i++)
                        visited[i] = 0;

                    bfs(v);
                    printf("\n BFS traversal starting from vertex %d:\n", v);
                    for (i = 1; i <= n; i++) {
                        if (visited[i])
                            printf("%d\t", i);
                    }
                    printf("\n");
                }
                break;

            case 2:
                // Reset reach array and count for DFS
                for (i = 1; i <= n; i++)
                    reach[i] = 0;
                count = 0;

                dfs(1); // Start DFS from vertex 1
                if (count == n - 1)
                    printf("\n Graph is connected\n");
                else
                    printf("\n Graph is not connected\n");
                break;

            case 3:
                exit(0);

            default:
                printf("\n Invalid choice! Please try again.\n");
        }
    }
    return 0;
}
