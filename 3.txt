#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <math.h>

#define MAX 100

// Function to return precedence of operators
int precedence(char c) {
    if(c == '+' || c == '-') {
        return 1;
    } else if(c == '*' || c == '/' || c == '%') {
        return 2;
    } else if(c == '^') {
        return 3;
    }
    return 0;
}

// Function to perform the infix to postfix conversion
void infixToPostfix(char infix[], char postfix[]) {
    char stack[MAX];
    int top = -1, k = 0;
    char symbol;
    
    for(int i = 0; infix[i] != '\0'; i++) {
        symbol = infix[i];
        
        if(isalnum(symbol)) {
            postfix[k++] = symbol;  // Operand goes directly to postfix
        } else if(symbol == '(') {
            stack[++top] = symbol;  // Left parenthesis is pushed onto stack
        } else if(symbol == ')') {
            while(top != -1 && stack[top] != '(') {
                postfix[k++] = stack[top--];  // Pop till left parenthesis
            }
            top--;  // Pop the '('
        } else {  // Operator
            while(top != -1 && precedence(stack[top]) >= precedence(symbol)) {
                postfix[k++] = stack[top--];  // Pop operators with higher precedence
            }
            stack[++top] = symbol;  // Push the current operator onto stack
        }
    }
    
    // Pop remaining operators from the stack
    while(top != -1) {
        postfix[k++] = stack[top--];
    }
    
    postfix[k] = '\0';  // Null terminate the postfix expression
}

int main() {
    char infix[MAX], postfix[MAX];
    
    printf("Enter an infix expression: ");
    scanf("%s", infix);
    
    infixToPostfix(infix, postfix);
    
    printf("Postfix Expression: %s\n", postfix);
    
    return 0;
}
